.data

.align 3
AESTable:
    .word 0x63c6a563, 0xa56363c6, 0xc6a56363, 0x6363c6a5
    .word 0x7cf8847c, 0x847c7cf8, 0xf8847c7c, 0x7c7cf884
    .word 0x77ee9977, 0x997777ee, 0xee997777, 0x7777ee99
    .word 0x7bf68d7b, 0x8d7b7bf6, 0xf68d7b7b, 0x7b7bf68d
    .word 0xf2ff0df2, 0x0df2f2ff, 0xff0df2f2, 0xf2f2ff0d
    .word 0x6bd6bd6b, 0xbd6b6bd6, 0xd6bd6b6b, 0x6b6bd6bd
    .word 0x6fdeb16f, 0xb16f6fde, 0xdeb16f6f, 0x6f6fdeb1
    .word 0xc59154c5, 0x54c5c591, 0x9154c5c5, 0xc5c59154
    .word 0x30605030, 0x50303060, 0x60503030, 0x30306050
    .word 0x01020301, 0x03010102, 0x02030101, 0x01010203
    .word 0x67cea967, 0xa96767ce, 0xcea96767, 0x6767cea9
    .word 0x2b567d2b, 0x7d2b2b56, 0x567d2b2b, 0x2b2b567d
    .word 0xfee719fe, 0x19fefee7, 0xe719fefe, 0xfefee719
    .word 0xd7b562d7, 0x62d7d7b5, 0xb562d7d7, 0xd7d7b562
    .word 0xab4de6ab, 0xe6abab4d, 0x4de6abab, 0xabab4de6
    .word 0x76ec9a76, 0x9a7676ec, 0xec9a7676, 0x7676ec9a
    .word 0xca8f45ca, 0x45caca8f, 0x8f45caca, 0xcaca8f45
    .word 0x821f9d82, 0x9d82821f, 0x1f9d8282, 0x82821f9d
    .word 0xc98940c9, 0x40c9c989, 0x8940c9c9, 0xc9c98940
    .word 0x7dfa877d, 0x877d7dfa, 0xfa877d7d, 0x7d7dfa87
    .word 0xfaef15fa, 0x15fafaef, 0xef15fafa, 0xfafaef15
    .word 0x59b2eb59, 0xeb5959b2, 0xb2eb5959, 0x5959b2eb
    .word 0x478ec947, 0xc947478e, 0x8ec94747, 0x47478ec9
    .word 0xf0fb0bf0, 0x0bf0f0fb, 0xfb0bf0f0, 0xf0f0fb0b
    .word 0xad41ecad, 0xecadad41, 0x41ecadad, 0xadad41ec
    .word 0xd4b367d4, 0x67d4d4b3, 0xb367d4d4, 0xd4d4b367
    .word 0xa25ffda2, 0xfda2a25f, 0x5ffda2a2, 0xa2a25ffd
    .word 0xaf45eaaf, 0xeaafaf45, 0x45eaafaf, 0xafaf45ea
    .word 0x9c23bf9c, 0xbf9c9c23, 0x23bf9c9c, 0x9c9c23bf
    .word 0xa453f7a4, 0xf7a4a453, 0x53f7a4a4, 0xa4a453f7
    .word 0x72e49672, 0x967272e4, 0xe4967272, 0x7272e496
    .word 0xc09b5bc0, 0x5bc0c09b, 0x9b5bc0c0, 0xc0c09b5b
    .word 0xb775c2b7, 0xc2b7b775, 0x75c2b7b7, 0xb7b775c2
    .word 0xfde11cfd, 0x1cfdfde1, 0xe11cfdfd, 0xfdfde11c
    .word 0x933dae93, 0xae93933d, 0x3dae9393, 0x93933dae
    .word 0x264c6a26, 0x6a26264c, 0x4c6a2626, 0x26264c6a
    .word 0x366c5a36, 0x5a36366c, 0x6c5a3636, 0x36366c5a
    .word 0x3f7e413f, 0x413f3f7e, 0x7e413f3f, 0x3f3f7e41
    .word 0xf7f502f7, 0x02f7f7f5, 0xf502f7f7, 0xf7f7f502
    .word 0xcc834fcc, 0x4fcccc83, 0x834fcccc, 0xcccc834f
    .word 0x34685c34, 0x5c343468, 0x685c3434, 0x3434685c
    .word 0xa551f4a5, 0xf4a5a551, 0x51f4a5a5, 0xa5a551f4
    .word 0xe5d134e5, 0x34e5e5d1, 0xd134e5e5, 0xe5e5d134
    .word 0xf1f908f1, 0x08f1f1f9, 0xf908f1f1, 0xf1f1f908
    .word 0x71e29371, 0x937171e2, 0xe2937171, 0x7171e293
    .word 0xd8ab73d8, 0x73d8d8ab, 0xab73d8d8, 0xd8d8ab73
    .word 0x31625331, 0x53313162, 0x62533131, 0x31316253
    .word 0x152a3f15, 0x3f15152a, 0x2a3f1515, 0x15152a3f
    .word 0x04080c04, 0x0c040408, 0x080c0404, 0x0404080c
    .word 0xc79552c7, 0x52c7c795, 0x9552c7c7, 0xc7c79552
    .word 0x23466523, 0x65232346, 0x46652323, 0x23234665
    .word 0xc39d5ec3, 0x5ec3c39d, 0x9d5ec3c3, 0xc3c39d5e
    .word 0x18302818, 0x28181830, 0x30281818, 0x18183028
    .word 0x9637a196, 0xa1969637, 0x37a19696, 0x969637a1
    .word 0x050a0f05, 0x0f05050a, 0x0a0f0505, 0x05050a0f
    .word 0x9a2fb59a, 0xb59a9a2f, 0x2fb59a9a, 0x9a9a2fb5
    .word 0x070e0907, 0x0907070e, 0x0e090707, 0x07070e09
    .word 0x12243612, 0x36121224, 0x24361212, 0x12122436
    .word 0x801b9b80, 0x9b80801b, 0x1b9b8080, 0x80801b9b
    .word 0xe2df3de2, 0x3de2e2df, 0xdf3de2e2, 0xe2e2df3d
    .word 0xebcd26eb, 0x26ebebcd, 0xcd26ebeb, 0xebebcd26
    .word 0x274e6927, 0x6927274e, 0x4e692727, 0x27274e69
    .word 0xb27fcdb2, 0xcdb2b27f, 0x7fcdb2b2, 0xb2b27fcd
    .word 0x75ea9f75, 0x9f7575ea, 0xea9f7575, 0x7575ea9f
    .word 0x09121b09, 0x1b090912, 0x121b0909, 0x0909121b
    .word 0x831d9e83, 0x9e83831d, 0x1d9e8383, 0x83831d9e
    .word 0x2c58742c, 0x742c2c58, 0x58742c2c, 0x2c2c5874
    .word 0x1a342e1a, 0x2e1a1a34, 0x342e1a1a, 0x1a1a342e
    .word 0x1b362d1b, 0x2d1b1b36, 0x362d1b1b, 0x1b1b362d
    .word 0x6edcb26e, 0xb26e6edc, 0xdcb26e6e, 0x6e6edcb2
    .word 0x5ab4ee5a, 0xee5a5ab4, 0xb4ee5a5a, 0x5a5ab4ee
    .word 0xa05bfba0, 0xfba0a05b, 0x5bfba0a0, 0xa0a05bfb
    .word 0x52a4f652, 0xf65252a4, 0xa4f65252, 0x5252a4f6
    .word 0x3b764d3b, 0x4d3b3b76, 0x764d3b3b, 0x3b3b764d
    .word 0xd6b761d6, 0x61d6d6b7, 0xb761d6d6, 0xd6d6b761
    .word 0xb37dceb3, 0xceb3b37d, 0x7dceb3b3, 0xb3b37dce
    .word 0x29527b29, 0x7b292952, 0x527b2929, 0x2929527b
    .word 0xe3dd3ee3, 0x3ee3e3dd, 0xdd3ee3e3, 0xe3e3dd3e
    .word 0x2f5e712f, 0x712f2f5e, 0x5e712f2f, 0x2f2f5e71
    .word 0x84139784, 0x97848413, 0x13978484, 0x84841397
    .word 0x53a6f553, 0xf55353a6, 0xa6f55353, 0x5353a6f5
    .word 0xd1b968d1, 0x68d1d1b9, 0xb968d1d1, 0xd1d1b968
    .word 0x00000000, 0x00000000, 0x00000000, 0x00000000
    .word 0xedc12ced, 0x2cededc1, 0xc12ceded, 0xededc12c
    .word 0x20406020, 0x60202040, 0x40602020, 0x20204060
    .word 0xfce31ffc, 0x1ffcfce3, 0xe31ffcfc, 0xfcfce31f
    .word 0xb179c8b1, 0xc8b1b179, 0x79c8b1b1, 0xb1b179c8
    .word 0x5bb6ed5b, 0xed5b5bb6, 0xb6ed5b5b, 0x5b5bb6ed
    .word 0x6ad4be6a, 0xbe6a6ad4, 0xd4be6a6a, 0x6a6ad4be
    .word 0xcb8d46cb, 0x46cbcb8d, 0x8d46cbcb, 0xcbcb8d46
    .word 0xbe67d9be, 0xd9bebe67, 0x67d9bebe, 0xbebe67d9
    .word 0x39724b39, 0x4b393972, 0x724b3939, 0x3939724b
    .word 0x4a94de4a, 0xde4a4a94, 0x94de4a4a, 0x4a4a94de
    .word 0x4c98d44c, 0xd44c4c98, 0x98d44c4c, 0x4c4c98d4
    .word 0x58b0e858, 0xe85858b0, 0xb0e85858, 0x5858b0e8
    .word 0xcf854acf, 0x4acfcf85, 0x854acfcf, 0xcfcf854a
    .word 0xd0bb6bd0, 0x6bd0d0bb, 0xbb6bd0d0, 0xd0d0bb6b
    .word 0xefc52aef, 0x2aefefc5, 0xc52aefef, 0xefefc52a
    .word 0xaa4fe5aa, 0xe5aaaa4f, 0x4fe5aaaa, 0xaaaa4fe5
    .word 0xfbed16fb, 0x16fbfbed, 0xed16fbfb, 0xfbfbed16
    .word 0x4386c543, 0xc5434386, 0x86c54343, 0x434386c5
    .word 0x4d9ad74d, 0xd74d4d9a, 0x9ad74d4d, 0x4d4d9ad7
    .word 0x33665533, 0x55333366, 0x66553333, 0x33336655
    .word 0x85119485, 0x94858511, 0x11948585, 0x85851194
    .word 0x458acf45, 0xcf45458a, 0x8acf4545, 0x45458acf
    .word 0xf9e910f9, 0x10f9f9e9, 0xe910f9f9, 0xf9f9e910
    .word 0x02040602, 0x06020204, 0x04060202, 0x02020406
    .word 0x7ffe817f, 0x817f7ffe, 0xfe817f7f, 0x7f7ffe81
    .word 0x50a0f050, 0xf05050a0, 0xa0f05050, 0x5050a0f0
    .word 0x3c78443c, 0x443c3c78, 0x78443c3c, 0x3c3c7844
    .word 0x9f25ba9f, 0xba9f9f25, 0x25ba9f9f, 0x9f9f25ba
    .word 0xa84be3a8, 0xe3a8a84b, 0x4be3a8a8, 0xa8a84be3
    .word 0x51a2f351, 0xf35151a2, 0xa2f35151, 0x5151a2f3
    .word 0xa35dfea3, 0xfea3a35d, 0x5dfea3a3, 0xa3a35dfe
    .word 0x4080c040, 0xc0404080, 0x80c04040, 0x404080c0
    .word 0x8f058a8f, 0x8a8f8f05, 0x058a8f8f, 0x8f8f058a
    .word 0x923fad92, 0xad92923f, 0x3fad9292, 0x92923fad
    .word 0x9d21bc9d, 0xbc9d9d21, 0x21bc9d9d, 0x9d9d21bc
    .word 0x38704838, 0x48383870, 0x70483838, 0x38387048
    .word 0xf5f104f5, 0x04f5f5f1, 0xf104f5f5, 0xf5f5f104
    .word 0xbc63dfbc, 0xdfbcbc63, 0x63dfbcbc, 0xbcbc63df
    .word 0xb677c1b6, 0xc1b6b677, 0x77c1b6b6, 0xb6b677c1
    .word 0xdaaf75da, 0x75dadaaf, 0xaf75dada, 0xdadaaf75
    .word 0x21426321, 0x63212142, 0x42632121, 0x21214263
    .word 0x10203010, 0x30101020, 0x20301010, 0x10102030
    .word 0xffe51aff, 0x1affffe5, 0xe51affff, 0xffffe51a
    .word 0xf3fd0ef3, 0x0ef3f3fd, 0xfd0ef3f3, 0xf3f3fd0e
    .word 0xd2bf6dd2, 0x6dd2d2bf, 0xbf6dd2d2, 0xd2d2bf6d
    .word 0xcd814ccd, 0x4ccdcd81, 0x814ccdcd, 0xcdcd814c
    .word 0x0c18140c, 0x140c0c18, 0x18140c0c, 0x0c0c1814
    .word 0x13263513, 0x35131326, 0x26351313, 0x13132635
    .word 0xecc32fec, 0x2fececc3, 0xc32fecec, 0xececc32f
    .word 0x5fbee15f, 0xe15f5fbe, 0xbee15f5f, 0x5f5fbee1
    .word 0x9735a297, 0xa2979735, 0x35a29797, 0x979735a2
    .word 0x4488cc44, 0xcc444488, 0x88cc4444, 0x444488cc
    .word 0x172e3917, 0x3917172e, 0x2e391717, 0x17172e39
    .word 0xc49357c4, 0x57c4c493, 0x9357c4c4, 0xc4c49357
    .word 0xa755f2a7, 0xf2a7a755, 0x55f2a7a7, 0xa7a755f2
    .word 0x7efc827e, 0x827e7efc, 0xfc827e7e, 0x7e7efc82
    .word 0x3d7a473d, 0x473d3d7a, 0x7a473d3d, 0x3d3d7a47
    .word 0x64c8ac64, 0xac6464c8, 0xc8ac6464, 0x6464c8ac
    .word 0x5dbae75d, 0xe75d5dba, 0xbae75d5d, 0x5d5dbae7
    .word 0x19322b19, 0x2b191932, 0x322b1919, 0x1919322b
    .word 0x73e69573, 0x957373e6, 0xe6957373, 0x7373e695
    .word 0x60c0a060, 0xa06060c0, 0xc0a06060, 0x6060c0a0
    .word 0x81199881, 0x98818119, 0x19988181, 0x81811998
    .word 0x4f9ed14f, 0xd14f4f9e, 0x9ed14f4f, 0x4f4f9ed1
    .word 0xdca37fdc, 0x7fdcdca3, 0xa37fdcdc, 0xdcdca37f
    .word 0x22446622, 0x66222244, 0x44662222, 0x22224466
    .word 0x2a547e2a, 0x7e2a2a54, 0x547e2a2a, 0x2a2a547e
    .word 0x903bab90, 0xab90903b, 0x3bab9090, 0x90903bab
    .word 0x880b8388, 0x8388880b, 0x0b838888, 0x88880b83
    .word 0x468cca46, 0xca46468c, 0x8cca4646, 0x46468cca
    .word 0xeec729ee, 0x29eeeec7, 0xc729eeee, 0xeeeec729
    .word 0xb86bd3b8, 0xd3b8b86b, 0x6bd3b8b8, 0xb8b86bd3
    .word 0x14283c14, 0x3c141428, 0x283c1414, 0x1414283c
    .word 0xdea779de, 0x79dedea7, 0xa779dede, 0xdedea779
    .word 0x5ebce25e, 0xe25e5ebc, 0xbce25e5e, 0x5e5ebce2
    .word 0x0b161d0b, 0x1d0b0b16, 0x161d0b0b, 0x0b0b161d
    .word 0xdbad76db, 0x76dbdbad, 0xad76dbdb, 0xdbdbad76
    .word 0xe0db3be0, 0x3be0e0db, 0xdb3be0e0, 0xe0e0db3b
    .word 0x32645632, 0x56323264, 0x64563232, 0x32326456
    .word 0x3a744e3a, 0x4e3a3a74, 0x744e3a3a, 0x3a3a744e
    .word 0x0a141e0a, 0x1e0a0a14, 0x141e0a0a, 0x0a0a141e
    .word 0x4992db49, 0xdb494992, 0x92db4949, 0x494992db
    .word 0x060c0a06, 0x0a06060c, 0x0c0a0606, 0x06060c0a
    .word 0x24486c24, 0x6c242448, 0x486c2424, 0x2424486c
    .word 0x5cb8e45c, 0xe45c5cb8, 0xb8e45c5c, 0x5c5cb8e4
    .word 0xc29f5dc2, 0x5dc2c29f, 0x9f5dc2c2, 0xc2c29f5d
    .word 0xd3bd6ed3, 0x6ed3d3bd, 0xbd6ed3d3, 0xd3d3bd6e
    .word 0xac43efac, 0xefacac43, 0x43efacac, 0xacac43ef
    .word 0x62c4a662, 0xa66262c4, 0xc4a66262, 0x6262c4a6
    .word 0x9139a891, 0xa8919139, 0x39a89191, 0x919139a8
    .word 0x9531a495, 0xa4959531, 0x31a49595, 0x959531a4
    .word 0xe4d337e4, 0x37e4e4d3, 0xd337e4e4, 0xe4e4d337
    .word 0x79f28b79, 0x8b7979f2, 0xf28b7979, 0x7979f28b
    .word 0xe7d532e7, 0x32e7e7d5, 0xd532e7e7, 0xe7e7d532
    .word 0xc88b43c8, 0x43c8c88b, 0x8b43c8c8, 0xc8c88b43
    .word 0x376e5937, 0x5937376e, 0x6e593737, 0x37376e59
    .word 0x6ddab76d, 0xb76d6dda, 0xdab76d6d, 0x6d6ddab7
    .word 0x8d018c8d, 0x8c8d8d01, 0x018c8d8d, 0x8d8d018c
    .word 0xd5b164d5, 0x64d5d5b1, 0xb164d5d5, 0xd5d5b164
    .word 0x4e9cd24e, 0xd24e4e9c, 0x9cd24e4e, 0x4e4e9cd2
    .word 0xa949e0a9, 0xe0a9a949, 0x49e0a9a9, 0xa9a949e0
    .word 0x6cd8b46c, 0xb46c6cd8, 0xd8b46c6c, 0x6c6cd8b4
    .word 0x56acfa56, 0xfa5656ac, 0xacfa5656, 0x5656acfa
    .word 0xf4f307f4, 0x07f4f4f3, 0xf307f4f4, 0xf4f4f307
    .word 0xeacf25ea, 0x25eaeacf, 0xcf25eaea, 0xeaeacf25
    .word 0x65caaf65, 0xaf6565ca, 0xcaaf6565, 0x6565caaf
    .word 0x7af48e7a, 0x8e7a7af4, 0xf48e7a7a, 0x7a7af48e
    .word 0xae47e9ae, 0xe9aeae47, 0x47e9aeae, 0xaeae47e9
    .word 0x08101808, 0x18080810, 0x10180808, 0x08081018
    .word 0xba6fd5ba, 0xd5baba6f, 0x6fd5baba, 0xbaba6fd5
    .word 0x78f08878, 0x887878f0, 0xf0887878, 0x7878f088
    .word 0x254a6f25, 0x6f25254a, 0x4a6f2525, 0x25254a6f
    .word 0x2e5c722e, 0x722e2e5c, 0x5c722e2e, 0x2e2e5c72
    .word 0x1c38241c, 0x241c1c38, 0x38241c1c, 0x1c1c3824
    .word 0xa657f1a6, 0xf1a6a657, 0x57f1a6a6, 0xa6a657f1
    .word 0xb473c7b4, 0xc7b4b473, 0x73c7b4b4, 0xb4b473c7
    .word 0xc69751c6, 0x51c6c697, 0x9751c6c6, 0xc6c69751
    .word 0xe8cb23e8, 0x23e8e8cb, 0xcb23e8e8, 0xe8e8cb23
    .word 0xdda17cdd, 0x7cdddda1, 0xa17cdddd, 0xdddda17c
    .word 0x74e89c74, 0x9c7474e8, 0xe89c7474, 0x7474e89c
    .word 0x1f3e211f, 0x211f1f3e, 0x3e211f1f, 0x1f1f3e21
    .word 0x4b96dd4b, 0xdd4b4b96, 0x96dd4b4b, 0x4b4b96dd
    .word 0xbd61dcbd, 0xdcbdbd61, 0x61dcbdbd, 0xbdbd61dc
    .word 0x8b0d868b, 0x868b8b0d, 0x0d868b8b, 0x8b8b0d86
    .word 0x8a0f858a, 0x858a8a0f, 0x0f858a8a, 0x8a8a0f85
    .word 0x70e09070, 0x907070e0, 0xe0907070, 0x7070e090
    .word 0x3e7c423e, 0x423e3e7c, 0x7c423e3e, 0x3e3e7c42
    .word 0xb571c4b5, 0xc4b5b571, 0x71c4b5b5, 0xb5b571c4
    .word 0x66ccaa66, 0xaa6666cc, 0xccaa6666, 0x6666ccaa
    .word 0x4890d848, 0xd8484890, 0x90d84848, 0x484890d8
    .word 0x03060503, 0x05030306, 0x06050303, 0x03030605
    .word 0xf6f701f6, 0x01f6f6f7, 0xf701f6f6, 0xf6f6f701
    .word 0x0e1c120e, 0x120e0e1c, 0x1c120e0e, 0x0e0e1c12
    .word 0x61c2a361, 0xa36161c2, 0xc2a36161, 0x6161c2a3
    .word 0x356a5f35, 0x5f35356a, 0x6a5f3535, 0x35356a5f
    .word 0x57aef957, 0xf95757ae, 0xaef95757, 0x5757aef9
    .word 0xb969d0b9, 0xd0b9b969, 0x69d0b9b9, 0xb9b969d0
    .word 0x86179186, 0x91868617, 0x17918686, 0x86861791
    .word 0xc19958c1, 0x58c1c199, 0x9958c1c1, 0xc1c19958
    .word 0x1d3a271d, 0x271d1d3a, 0x3a271d1d, 0x1d1d3a27
    .word 0x9e27b99e, 0xb99e9e27, 0x27b99e9e, 0x9e9e27b9
    .word 0xe1d938e1, 0x38e1e1d9, 0xd938e1e1, 0xe1e1d938
    .word 0xf8eb13f8, 0x13f8f8eb, 0xeb13f8f8, 0xf8f8eb13
    .word 0x982bb398, 0xb398982b, 0x2bb39898, 0x98982bb3
    .word 0x11223311, 0x33111122, 0x22331111, 0x11112233
    .word 0x69d2bb69, 0xbb6969d2, 0xd2bb6969, 0x6969d2bb
    .word 0xd9a970d9, 0x70d9d9a9, 0xa970d9d9, 0xd9d9a970
    .word 0x8e07898e, 0x898e8e07, 0x07898e8e, 0x8e8e0789
    .word 0x9433a794, 0xa7949433, 0x33a79494, 0x949433a7
    .word 0x9b2db69b, 0xb69b9b2d, 0x2db69b9b, 0x9b9b2db6
    .word 0x1e3c221e, 0x221e1e3c, 0x3c221e1e, 0x1e1e3c22
    .word 0x87159287, 0x92878715, 0x15928787, 0x87871592
    .word 0xe9c920e9, 0x20e9e9c9, 0xc920e9e9, 0xe9e9c920
    .word 0xce8749ce, 0x49cece87, 0x8749cece, 0xcece8749
    .word 0x55aaff55, 0xff5555aa, 0xaaff5555, 0x5555aaff
    .word 0x28507828, 0x78282850, 0x50782828, 0x28285078
    .word 0xdfa57adf, 0x7adfdfa5, 0xa57adfdf, 0xdfdfa57a
    .word 0x8c038f8c, 0x8f8c8c03, 0x038f8c8c, 0x8c8c038f
    .word 0xa159f8a1, 0xf8a1a159, 0x59f8a1a1, 0xa1a159f8
    .word 0x89098089, 0x80898909, 0x09808989, 0x89890980
    .word 0x0d1a170d, 0x170d0d1a, 0x1a170d0d, 0x0d0d1a17
    .word 0xbf65dabf, 0xdabfbf65, 0x65dabfbf, 0xbfbf65da
    .word 0xe6d731e6, 0x31e6e6d7, 0xd731e6e6, 0xe6e6d731
    .word 0x4284c642, 0xc6424284, 0x84c64242, 0x424284c6
    .word 0x68d0b868, 0xb86868d0, 0xd0b86868, 0x6868d0b8
    .word 0x4182c341, 0xc3414182, 0x82c34141, 0x414182c3
    .word 0x9929b099, 0xb0999929, 0x29b09999, 0x999929b0
    .word 0x2d5a772d, 0x772d2d5a, 0x5a772d2d, 0x2d2d5a77
    .word 0x0f1e110f, 0x110f0f1e, 0x1e110f0f, 0x0f0f1e11
    .word 0xb07bcbb0, 0xcbb0b07b, 0x7bcbb0b0, 0xb0b07bcb
    .word 0x54a8fc54, 0xfc5454a8, 0xa8fc5454, 0x5454a8fc
    .word 0xbb6dd6bb, 0xd6bbbb6d, 0x6dd6bbbb, 0xbbbb6dd6
    .word 0x162c3a16, 0x3a16162c, 0x2c3a1616, 0x16162c3a


.text

// o0-o1: output (can overlap with input)
// i0-i1: intput, const
//    m0: mask, const
//    c0: shift distance, immediate
//    r0: tmp
.macro swapmove o0,o1, i0,i1, m0, c0, r0
    slli   \r0, \i0, \c0
    xor    \r0, \r0, \i1
    and    \r0, \r0, \m0
    xor    \o1, \i1, \r0
    srli   \r0, \r0, \c0
    xor    \o0, \i0, \r0
.endm

// k0-k3: round key, const
// b0-b7: bitsliced round key
// m0-m2: masks, const
//    r0: tmp
.macro ksbitslice k0,k1,k2,k3, b0,b1,b2,b3,b4,b5,b6,b7, m0,m1,m2, r0
    swapmove \b0,\b4, \k0,\k0, \m0, 1, \r0
    swapmove \b1,\b5, \k1,\k1, \m0, 1, \r0
    swapmove \b2,\b6, \k2,\k2, \m0, 1, \r0
    swapmove \b3,\b7, \k3,\k3, \m0, 1, \r0

    swapmove \b0,\b1, \b0,\b1, \m1, 2, \r0
    swapmove \b2,\b3, \b2,\b3, \m1, 2, \r0
    swapmove \b4,\b5, \b4,\b5, \m1, 2, \r0
    swapmove \b6,\b7, \b6,\b7, \m1, 2, \r0

    swapmove \b0,\b2, \b0,\b2, \m2, 4, \r0
    swapmove \b1,\b3, \b1,\b3, \m2, 4, \r0
    swapmove \b4,\b6, \b4,\b6, \m2, 4, \r0
    swapmove \b5,\b7, \b5,\b7, \m2, 4, \r0
.endm

//   out: pointer to write to, const
// b0-b7: bitsliced round key, const
.macro storerk out, b0,b1,b2,b3,b4,b5,b6,b7
    sw     \b0,  0+\out
    sw     \b1,  4+\out
    sw     \b2,  8+\out
    sw     \b3, 12+\out
    sw     \b4, 16+\out
    sw     \b5, 20+\out
    sw     \b6, 24+\out
    sw     \b7, 28+\out
.endm

// k0-k3: round key
//    c0: mask 0xff0, const
//    c1: address of AESTable, const
//    c2: round constant, immediate
// r0-r4: tmp
.macro ksround k0,k1,k2,k3, c0,c1,c2, r0,r1,r2,r3,r4
    slli   \r4, \k3,   4
    and    \r3, \r4, \c0
    srli   \r4, \k3,   4
    and    \r0, \r4, \c0
    srli   \r4, \k3,  12
    and    \r1, \r4, \c0
    srli   \r4, \k3,  20
    and    \r2, \r4, \c0

    add    \r4, \r0, \c1
    lbu    \r0, (\r4)
    add    \r4, \r1, \c1
    lbu    \r1, (\r4)
    add    \r4, \r2, \c1
    lbu    \r2, (\r4)
    add    \r4, \r3, \c1
    lbu    \r3, (\r4)

    xori   \k0, \k0, \c2
    xor    \k0, \k0, \r0
    slli   \r1, \r1,   8
    xor    \k0, \k0, \r1
    slli   \r2, \r2,  16
    xor    \k0, \k0, \r2
    slli   \r3, \r3,  24
    xor    \k0, \k0, \r3
    xor    \k1, \k1, \k0
    xor    \k2, \k2, \k1
    xor    \k3, \k3, \k2
.endm

// b0-b3: registers (bits) to invert
.macro subbytesnots b0,b1,b2,b3
    not    \b0, \b0
    not    \b1, \b1
    not    \b2, \b2
    not    \b3, \b3
.endm

// void AES_128_keyschedule(const uint8_t *key, uint8_t *rk);
.globl AES_128_keyschedule
.type AES_128_keyschedule, %function
.align 3
AES_128_keyschedule:
    // a0: key (pointer to intput), then mask0
    // a1: rk (pointer to output)
    // a2-a5: state
    // a6: mask1
    // a7: mask2
    // t0-t3: state
    // t4: AESTable
    // t5: tmp
    // t6: const 0xff0
    // s0-s3: state

    // save s0-s3
    addi    sp, sp, -20
    sw      s0,  4(sp)
    sw      s1,  8(sp)
    sw      s2, 12(sp)
    sw      s3, 16(sp)

    // load key
    lw      t0,  0(a0)
    lw      t1,  4(a0)
    lw      t2,  8(a0)
    lw      t3, 12(a0)

    // load table address once
    la      t4, AESTable

    // set 0x00000ff0 in t6
    li      t6, 0xff0

    // set bitslice masks
    li      a0, 0xaaaaaaaa
    li      a6, 0xcccccccc
    li      a7, 0xf0f0f0f0

    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    storerk   0(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x01, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk  32(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x02, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk  64(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x04, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk  96(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x08, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk 128(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x10, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk 160(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x20, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk 192(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x40, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk 224(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x80, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk 256(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x1b, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk 288(a1), s0,a2,s1,a3,s2,a4,s3,a5
    ksround t0,t1,t2,t3, t6,t4,0x36, a2,a3,a4,a5,t5
    ksbitslice t0,t1,t2,t3, s0,s1,s2,s3,a2,a3,a4,a5, a0,a6,a7, t5
    subbytesnots s1,s3,a2,a5
    storerk 320(a1), s0,a2,s1,a3,s2,a4,s3,a5

    // restore s0-s3
    lw      s0,  4(sp)
    lw      s1,  8(sp)
    lw      s2, 12(sp)
    lw      s3, 16(sp)
    addi    sp, sp, 20

    ret
.size AES_128_keyschedule,.-AES_128_keyschedule


//    b0: register of which bytes should be reversed
// r0-r1: tmp
.macro revbytes b0, r0,r1
    andi   \r0, \b0, 0xff
    slli   \r0, \r0, 8
    srli   \b0, \b0, 8
    andi   \r1, \b0, 0xff
    or     \r0, \r0, \r1
    slli   \r0, \r0, 8
    srli   \b0, \b0, 8
    andi   \r1, \b0, 0xff
    or     \r0, \r0, \r1
    slli   \r0, \r0, 8
    srli   \b0, \b0, 8
    or     \b0, \b0, \r0
.endm

// b0-b7: state
// r0-r3: tmp
.macro bitslice b0,b1,b2,b3,b4,b5,b6,b7, r0,r1,r2,r3
    li     \r0, 0xaaaaaaaa
    swapmove \b0,\b4, \b0,\b4, \r0, 1, \r1
    swapmove \b1,\b5, \b1,\b5, \r0, 1, \r1
    swapmove \b2,\b6, \b2,\b6, \r0, 1, \r1
    swapmove \b3,\b7, \b3,\b7, \r0, 1, \r1

    li     \r0, 0xcccccccc
    swapmove \b0,\r2, \b0,\b1, \r0, 2, \r1
    swapmove \b1,\b5, \b4,\b5, \r0, 2, \r1
    swapmove \b4,\b3, \b2,\b3, \r0, 2, \r1
    swapmove \r3,\b7, \b6,\b7, \r0, 2, \r1

    li     \r0, 0xf0f0f0f0
    swapmove \b0,\b4, \b0,\b4, \r0, 4, \r1
    swapmove \b2,\b6, \r2,\b3, \r0, 4, \r1
    swapmove \b3,\b7, \b5,\b7, \r0, 4, \r1
    swapmove \b1,\b5, \b1,\r3, \r0, 4, \r1
.endm

// b0-b7: state
// r0-r3: tmp
.macro unbitslice b0,b1,b2,b3,b4,b5,b6,b7, r0,r1,r2
    li     \r0, 0xf0f0f0f0
    swapmove \b0,\b4, \b0,\b4, \r0, 4, \r1
    swapmove \b2,\b6, \b2,\b6, \r0, 4, \r1
    swapmove \b3,\b7, \b3,\b7, \r0, 4, \r1
    swapmove \r2,\b5, \b1,\b5, \r0, 4, \r1

    li     \r0, 0xcccccccc
    swapmove \b0,\b1, \b0,\b2, \r0, 2, \r1
    swapmove \b2,\b6, \b4,\b6, \r0, 2, \r1
    swapmove \b4,\b3, \r2,\b3, \r0, 2, \r1
    swapmove \r2,\b7, \b5,\b7, \r0, 2, \r1

    li     \r0, 0xaaaaaaaa
    swapmove \b0,\b4, \b0,\b4, \r0, 1, \r1
    swapmove \b1,\b5, \b1,\b3, \r0, 1, \r1
    swapmove \b3,\b7, \b6,\b7, \r0, 1, \r1
    swapmove \b2,\b6, \b2,\r2, \r0, 1, \r1
.endm

// b0-b7: state
//    rk: pointer to round keys
// r0-r1: tmp
.macro addroundkey b0,b1,b2,b3,b4,b5,b6,b7, rk, r0,r1
    lw     \r0,  0+\rk
    lw     \r1,  4+\rk
    xor    \b0, \b0, \r0
    xor    \b1, \b1, \r1
    lw     \r0,  8+\rk
    lw     \r1, 12+\rk
    xor    \b2, \b2, \r0
    xor    \b3, \b3, \r1
    lw     \r0, 16+\rk
    lw     \r1, 20+\rk
    xor    \b4, \b4, \r0
    xor    \b5, \b5, \r1
    lw     \r0, 24+\rk
    lw     \r1, 28+\rk
    xor    \b6, \b6, \r0
    xor    \b7, \b7, \r1
.endm

//  b0-b7: state
// r0-r17: tmp
.macro subbytes b0,b1,b2,b3,b4,b5,b6,b7, r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17
    xor    \r0,  \b3,  \b5   /* Exec y14 = U3 ^ U5 into r0         */
    xor    \r1,  \b0,  \b6   /* Exec y13 = U0 ^ U6 into r1         */
    xor    \r2,  \r1,  \r0   /* Exec y12 = y13 ^ y14 into r2       */
    xor    \r3,  \b4,  \r2   /* Exec t1 = U4 ^ y12 into r3         */
    xor    \r4,  \r3,  \b5   /* Exec y15 = t1 ^ U5 into r4         */
    and    \r5,  \r2,  \r4   /* Exec t2 = y12 & y15 into r5        */
    xor    \r6,  \r4,  \b7   /* Exec y6 = y15 ^ U7 into r6         */
    xor    \r7,  \r3,  \b1   /* Exec y20 = t1 ^ U1 into r7         */
    xor    \r8,  \b0,  \b3   /* Exec y9 = U0 ^ U3 into r8          */
    xor    \r9,  \r7,  \r8   /* Exec y11 = y20 ^ y9 into r9        */
    and   \r10,  \r8,  \r9   /* Exec t12 = y9 & y11 into r10       */
    xor   \r11,  \b7,  \r9   /* Exec y7 = U7 ^ y11 into r11        */
    xor   \r12,  \b0,  \b5   /* Exec y8 = U0 ^ U5 into r12         */
    xor   \r13,  \b1,  \b2   /* Exec t0 = U1 ^ U2 into r13         */
    xor   \r14,  \r4, \r13   /* Exec y10 = y15 ^ t0 into r14       */
    xor   \r15, \r14,  \r9   /* Exec y17 = y10 ^ y11 into r15      */
    and   \r16,  \r0, \r15   /* Exec t13 = y14 & y17 into r16      */
    xor   \r17, \r16, \r10   /* Exec t14 = t13 ^ t12 into r17      */
    xor    \b1, \r14, \r12   /* Exec y19 = y10 ^ y8 into b1        */
    and    \b2, \r12, \r14   /* Exec t15 = y8 & y10 into b2        */
    xor    \b2,  \b2, \r10   /* Exec t16 = t15 ^ t12 into b2       */
    xor    \b4, \r13,  \r9   /* Exec y16 = t0 ^ y11 into b4        */
    xor    \b5,  \r1,  \b4   /* Exec y21 = y13 ^ y16 into b5       */
    and    \r3,  \r1,  \b4   /* Exec t7 = y13 & y16 into r3        */
    xor   \r10,  \b0,  \b4   /* Exec y18 = U0 ^ y16 into r10       */
    xor   \r13, \r13,  \b7   /* Exec y1 = t0 ^ U7 into r13         */
    xor    \b3, \r13,  \b3   /* Exec y4 = y1 ^ U3 into b3          */
    and   \r16,  \b3,  \b7   /* Exec t5 = y4 & U7 into r16         */
    xor   \r16, \r16,  \r5   /* Exec t6 = t5 ^ t2 into r16         */
    xor   \r16, \r16,  \b2   /* Exec t18 = t6 ^ t16 into r16       */
    xor    \b1, \r16,  \b1   /* Exec t22 = t18 ^ y19 into b1       */
    xor    \b0, \r13,  \b0   /* Exec y2 = y1 ^ U0 into b0          */
    and   \r16,  \b0, \r11   /* Exec t10 = y2 & y7 into r16        */
    xor   \r16, \r16,  \r3   /* Exec t11 = t10 ^ t7 into r16       */
    xor    \b2, \r16,  \b2   /* Exec t20 = t11 ^ t16 into b2       */
    xor    \b2,  \b2, \r10   /* Exec t24 = t20 ^ y18 into b2       */
    xor    \b6, \r13,  \b6   /* Exec y5 = y1 ^ U6 into b6          */
    and   \r10,  \b6, \r13   /* Exec t8 = y5 & y1 into r10         */
    xor    \r3, \r10,  \r3   /* Exec t9 = t8 ^ t7 into r3          */
    xor    \r3,  \r3, \r17   /* Exec t19 = t9 ^ t14 into r3        */
    xor    \b5,  \r3,  \b5   /* Exec t23 = t19 ^ y21 into b5       */
    xor    \r3,  \b6, \r12   /* Exec y3 = y5 ^ y8 into r3          */
    and   \r10,  \r3,  \r6   /* Exec t3 = y3 & y6 into r10         */
    xor    \r5, \r10,  \r5   /* Exec t4 = t3 ^ t2 into r5          */
    xor    \r5,  \r5,  \r7   /* Exec t17 = t4 ^ y20 into r5        */
    xor    \r5,  \r5, \r17   /* Exec t21 = t17 ^ t14 into r5       */
    and    \r7,  \r5,  \b5   /* Exec t26 = t21 & t23 into r7       */
    xor   \r10,  \b2,  \r7   /* Exec t27 = t24 ^ t26 into r10      */
    xor    \r7,  \b1,  \r7   /* Exec t31 = t22 ^ t26 into r7       */
    xor    \r5,  \r5,  \b1   /* Exec t25 = t21 ^ t22 into r5       */
    and   \r16,  \r5, \r10   /* Exec t28 = t25 & t27 into r16      */
    xor    \b1, \r16,  \b1   /* Exec t29 = t28 ^ t22 into b1       */
    and   \r17,  \b1,  \b0   /* Exec z14 = t29 & y2 into r17       */
    and   \r11,  \b1, \r11   /* Exec z5 = t29 & y7 into r11        */
    xor   \r16,  \b5,  \b2   /* Exec t30 = t23 ^ t24 into r16      */
    and    \r7,  \r7, \r16   /* Exec t32 = t31 & t30 into r7       */
    xor    \r7,  \r7,  \b2   /* Exec t33 = t32 ^ t24 into r7       */
    xor   \r16, \r10,  \r7   /* Exec t35 = t27 ^ t33 into r16      */
    and    \b2,  \b2, \r16   /* Exec t36 = t24 & t35 into b2       */
    xor   \r10, \r10,  \b2   /* Exec t38 = t27 ^ t36 into r10      */
    and   \r10,  \b1, \r10   /* Exec t39 = t29 & t38 into r10      */
    xor    \r5,  \r5, \r10   /* Exec t40 = t25 ^ t39 into r5       */
    xor   \r10,  \b1,  \r5   /* Exec t43 = t29 ^ t40 into r10      */
    and    \b4, \r10,  \b4   /* Exec z3 = t43 & y16 into b4        */
    xor   \r11,  \b4, \r11   /* Exec tc12 = z3 ^ z5 into r11       */
    and    \r1, \r10,  \r1   /* Exec z12 = t43 & y13 into r1       */
    and    \b6,  \r5,  \b6   /* Exec z13 = t40 & y5 into b6        */
    and   \r10,  \r5, \r13   /* Exec z4 = t40 & y1 into r10        */
    xor    \b4,  \b4, \r10   /* Exec tc6 = z3 ^ z4 into b4         */
    xor    \b5,  \b5,  \r7   /* Exec t34 = t23 ^ t33 into b5       */
    xor    \b2,  \b2,  \b5   /* Exec t37 = t36 ^ t34 into b2       */
    xor    \b5,  \r5,  \b2   /* Exec t41 = t40 ^ t37 into b5       */
    and    \r5,  \b5, \r14   /* Exec z8 = t41 & y10 into r5        */
    and   \r10,  \b5, \r12   /* Exec z17 = t41 & y8 into r10       */
    xor   \r12,  \r7,  \b2   /* Exec t44 = t33 ^ t37 into r12      */
    and    \r4, \r12,  \r4   /* Exec z0 = t44 & y15 into r4        */
    and    \r2, \r12,  \r2   /* Exec z9 = t44 & y12 into r2        */
    and    \r3,  \b2,  \r3   /* Exec z10 = t37 & y3 into r3        */
    and    \b2,  \b2,  \r6   /* Exec z1 = t37 & y6 into b2         */
    xor    \b2,  \b2,  \r4   /* Exec tc5 = z1 ^ z0 into b2         */
    xor   \r13,  \b4,  \b2   /* Exec tc11 = tc6 ^ tc5 into r13     */
    and    \b3,  \r7,  \b3   /* Exec z11 = t33 & y4 into b3        */
    xor    \b1,  \b1,  \r7   /* Exec t42 = t29 ^ t33 into b1       */
    xor    \b5,  \b1,  \b5   /* Exec t45 = t42 ^ t41 into b5       */
    and    \r6,  \b5, \r15   /* Exec z7 = t45 & y17 into r6        */
    xor    \b4,  \r6,  \b4   /* Exec tc8 = z7 ^ tc6 into b4        */
    and    \r0,  \b5,  \r0   /* Exec z16 = t45 & y14 into r0       */
    and    \b5,  \b1,  \r9   /* Exec z6 = t42 & y11 into b5        */
    xor    \b5,  \b5,  \b4   /* Exec tc16 = z6 ^ tc8 into b5       */
    and    \b1,  \b1,  \r8   /* Exec z15 = t42 & y9 into b1        */
    xor    \r6,  \b1,  \b5   /* Exec tc20 = z15 ^ tc16 into r6     */
    xor    \r0,  \b1,  \r0   /* Exec tc1 = z15 ^ z16 into r0       */
    xor    \b1,  \r3,  \r0   /* Exec tc2 = z10 ^ tc1 into b1       */
    xor   \r15,  \b1,  \b3   /* Exec tc21 = tc2 ^ z11 into r15     */
    xor    \r2,  \r2,  \b1   /* Exec tc3 = z9 ^ tc2 into r2        */
    xor    \b0,  \r2,  \b5   /* Exec S0 = tc3 ^ tc16 into b0       */
    xor    \b3,  \r2, \r13   /* Exec S3 = tc3 ^ tc11 into b3       */
    xor    \b1,  \b3,  \b5   /* Exec S1 = S3 ^ tc16 ^ 1 into b1    */
    xor    \r0,  \b6,  \r0   /* Exec tc13 = z13 ^ tc1 into r0      */
    and    \b5,  \r7,  \b7   /* Exec z2 = t33 & U7 into b5         */
    xor   \r14,  \r4,  \b5   /* Exec tc4 = z0 ^ z2 into r14        */
    xor    \b6,  \r1, \r14   /* Exec tc7 = z12 ^ tc4 into b6       */
    xor    \b6,  \r5,  \b6   /* Exec tc9 = z8 ^ tc7 into b6        */
    xor    \b6,  \b4,  \b6   /* Exec tc10 = tc8 ^ tc9 into b6      */
    xor    \b2, \r17,  \b6   /* Exec tc17 = z14 ^ tc10 into b2     */
    xor    \b5, \r15,  \b2   /* Exec S5 = tc21 ^ tc17 into b5      */
    xor    \b2,  \b2,  \r6   /* Exec tc26 = tc17 ^ tc20 into b2    */
    xor    \b2,  \b2, \r10   /* Exec S2 = tc26 ^ z17 ^ 1 into b2   */
    xor   \r14, \r14, \r11   /* Exec tc14 = tc4 ^ tc12 into r14    */
    xor    \r0,  \r0, \r14   /* Exec tc18 = tc13 ^ tc14 into r0    */
    xor    \b6,  \b6,  \r0   /* Exec S6 = tc10 ^ tc18 ^ 1 into b6  */
    xor    \b7,  \r1,  \r0   /* Exec S7 = z12 ^ tc18 ^ 1 into b7   */
    xor    \b4, \r14,  \b3   /* Exec S4 = tc14 ^ S3 into b4        */
// [('b0', 'S0'), ('b1', 'S1'), ('b2', 'S2'), ('b3', 'S3'), ('b4', 'S4'), ('b5', 'S5'), ('b6', 'S6'), ('b7', 'S7'), ('r0', 'tc18'), ('r1', 'z12'), ('r2', 'tc3'), ('r3', 'z10'), ('r4', 'z0'), ('r5', 'z8'), ('r6', 'tc20'), ('r7', 't33'), ('r8', 'y9'), ('r9', 'y11'), ('r10', 'z17'), ('r11', 'tc12'), ('r12', 't44'), ('r13', 'tc11'), ('r14', 'tc14'), ('r15', 'tc21'), ('r16', 't35'), ('r17', 'z14')]
.endm

//    b0: register to apply shiftrows on
// m0-m5: masks to extract bits, const
// r0-r1: tmp
.macro shiftrow b0, m0,m1,m2,m3,m4,m5, r0,r1
    andi   \r0, \b0, 0xff
    and    \r1, \b0, \m0
    slli   \r1, \r1, 2
    or     \r0, \r0, \r1
    and    \r1, \b0, \m1
    srli   \r1, \r1, 6
    or     \r0, \r0, \r1
    and    \r1, \b0, \m2
    slli   \r1, \r1, 4
    or     \r0, \r0, \r1
    and    \r1, \b0, \m3
    srli   \r1, \r1, 4
    or     \r0, \r0, \r1
    and    \r1, \b0, \m4
    slli   \r1, \r1, 6
    or     \r0, \r0, \r1
    and    \r1, \b0, \m5
    srli   \r1, \r1, 2
    or     \b0, \r0, \r1
.endm

// b0-b7: state
// r0-r7: tmp
.macro shiftrows b0,b1,b2,b3,b4,b5,b6,b7, r0,r1,r2,r3,r4,r5,r6,r7
    li     \r0, 0x00003f00
    li     \r1, 0x0000c000
    li     \r2, 0x000f0000
    li     \r3, 0x00f00000
    li     \r4, 0x03000000
    li     \r5, 0xfc000000

    shiftrow \b0, \r0,\r1,\r2,\r3,\r4,\r5, \r6,\r7
    shiftrow \b1, \r0,\r1,\r2,\r3,\r4,\r5, \r6,\r7
    shiftrow \b2, \r0,\r1,\r2,\r3,\r4,\r5, \r6,\r7
    shiftrow \b3, \r0,\r1,\r2,\r3,\r4,\r5, \r6,\r7
    shiftrow \b4, \r0,\r1,\r2,\r3,\r4,\r5, \r6,\r7
    shiftrow \b5, \r0,\r1,\r2,\r3,\r4,\r5, \r6,\r7
    shiftrow \b6, \r0,\r1,\r2,\r3,\r4,\r5, \r6,\r7
    shiftrow \b7, \r0,\r1,\r2,\r3,\r4,\r5, \r6,\r7
.endm


//    o0: output (can overlap with input)
//    i0: input, const
//    c0: rotate distance, immediate
// r0-r1: tmp
.macro ror o0, i0, c0, r0,r1
    srli   \r0, \i0, \c0
    slli   \r1, \i0, 32-\c0
    or     \o0, \r0, \r1
.endm

// b0-b7: state
// r0-r8: tmp
.macro mixcolumns b0,b1,b2,b3,b4,b5,b6,b7, r0,r1,r2,r3,r4,r5,r6,r7,r8,r9
    ror    \r0, \b0, 8, \r8,\r9
    ror    \r1, \b1, 8, \r8,\r9
    ror    \r2, \b2, 8, \r8,\r9
    ror    \r3, \b3, 8, \r8,\r9
    ror    \r4, \b4, 8, \r8,\r9
    ror    \r5, \b5, 8, \r8,\r9
    ror    \r6, \b6, 8, \r8,\r9
    ror    \r7, \b7, 8, \r8,\r9

    xor    \b0, \b0, \r0
    xor    \b1, \b1, \r1
    xor    \b2, \b2, \r2
    xor    \b3, \b3, \r3
    xor    \b4, \b4, \r4
    xor    \b5, \b5, \r5
    xor    \b6, \b6, \r6
    xor    \b7, \b7, \r7

    xor    \r0, \r0, \b1
    xor    \r1, \r1, \b2
    xor    \r2, \r2, \b3
    xor    \r3, \r3, \b0
    xor    \r3, \r3, \b4
    xor    \r4, \r4, \b0
    xor    \r4, \r4, \b5
    xor    \r5, \r5, \b6
    xor    \r6, \r6, \b0
    xor    \r6, \r6, \b7
    xor    \r7, \r7, \b0

    ror    \b0, \b0, 16, \r8,\r9
    ror    \b1, \b1, 16, \r8,\r9
    ror    \b2, \b2, 16, \r8,\r9
    ror    \b3, \b3, 16, \r8,\r9
    ror    \b4, \b4, 16, \r8,\r9
    ror    \b5, \b5, 16, \r8,\r9
    ror    \b6, \b6, 16, \r8,\r9
    ror    \b7, \b7, 16, \r8,\r9

    xor    \b0, \b0, \r0
    xor    \b1, \b1, \r1
    xor    \b2, \b2, \r2
    xor    \b3, \b3, \r3
    xor    \b4, \b4, \r4
    xor    \b5, \b5, \r5
    xor    \b6, \b6, \r6
    xor    \b7, \b7, \r7
.endm

//  b0-b7: state
//     c0: pointer to the round keys, const
// r0-r17: tmp
.macro round b0,b1,b2,b3,b4,b5,b6,b7, c0, r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17
    subbytes    \b0,\b1,\b2,\b3,\b4,\b5,\b6,\b7, \r0,\r1,\r2,\r3,\r4,\r5,\r6,\r7,\r8,\r9,\r10,\r11,\r12,\r13,\r14,\r15,\r16,\r17
    shiftrows   \b0,\b1,\b2,\b3,\b4,\b5,\b6,\b7, \r0,\r1,\r2,\r3,\r4,\r5,\r6,\r7
    mixcolumns  \b0,\b1,\b2,\b3,\b4,\b5,\b6,\b7, \r0,\r1,\r2,\r3,\r4,\r5,\r6,\r7,\r8,\r9
    addroundkey \b0,\b1,\b2,\b3,\b4,\b5,\b6,\b7, \c0, \r0,\r1
.endm

// void AES_128_encrypt_ctr(param const *, const uint8_t *, uint8_t *, uint32_t);
.globl AES_128_encrypt_ctr
.type AES_128_encrypt_ctr, %function
.align 3
AES_128_encrypt_ctr:
    // a0: p
    // a1: in, tmp
    // a2: out, tmp
    // a3: len, tmp
    // a4-a7: state
    // t0-t3: state
    // t4-t6: tmp
    // s0-s11: tmp
    addi    sp, sp, -64
    sw      a1, 60(sp)
    sw      a2, 56(sp)
    sw      a3, 52(sp)
    sw      s0, 48(sp)
    sw      s1, 44(sp)
    sw      s2, 40(sp)
    sw      s3, 36(sp)
    sw      s4, 32(sp)
    sw      s5, 28(sp)
    sw      s6, 24(sp)
    sw      s7, 20(sp)
    sw      s8, 16(sp)
    sw      s9, 12(sp)
    sw     s10,  8(sp)
    sw     s11,  4(sp)

.align 2
1:  // load ctrnonce
    lw      a4,  0(a0)
    lw      a5,  4(a0)
    lw      a6,  8(a0)
    lw      a7, 12(a0)
    mv      t0, a4
    mv      t1, a5
    mv      t2, a6
    mv      t3, a7

    // reverse, increase ctr, reverse
    revbytes t3, t4,t5
    addi     t3, t3, 1
    revbytes t3, t4,t5

    bitslice    a4,a5,a6,a7,t0,t1,t2,t3, a1,t4,t5,t6

    addroundkey a4,a5,a6,a7,t0,t1,t2,t3,  16(a0), t4,t5
    round       a4,a5,a6,a7,t0,t1,t2,t3,  48(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    round       a4,a5,a6,a7,t0,t1,t2,t3,  80(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    round       a4,a5,a6,a7,t0,t1,t2,t3, 112(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    round       a4,a5,a6,a7,t0,t1,t2,t3, 144(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    round       a4,a5,a6,a7,t0,t1,t2,t3, 176(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    round       a4,a5,a6,a7,t0,t1,t2,t3, 208(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    round       a4,a5,a6,a7,t0,t1,t2,t3, 240(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    round       a4,a5,a6,a7,t0,t1,t2,t3, 272(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    round       a4,a5,a6,a7,t0,t1,t2,t3, 304(a0), a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    subbytes    a4,a5,a6,a7,t0,t1,t2,t3, a1,a2,a3,t4,t5,t6,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11
    shiftrows   a4,a5,a6,a7,t0,t1,t2,t3, a1,a2,a3,t4,t5,t6,s0,s1
    addroundkey a4,a5,a6,a7,t0,t1,t2,t3, 336(a0), t4,t5

    unbitslice  a4,a5,a6,a7,t0,t1,t2,t3, t4,t5,t6

    lw      a1, 60(sp) // in
    lw      a2, 56(sp) // out
    lw      a3, 52(sp) // len

    // xor keystream with input
    lw      s0,  0(a1)
    lw      s1,  4(a1)
    lw      s2,  8(a1)
    lw      s3, 12(a1)
    lw      s4, 16(a1)
    lw      s5, 20(a1)
    lw      s6, 24(a1)
    lw      s7, 28(a1)
    xor     a4, a4, s0
    xor     a5, a5, s1
    xor     a6, a6, s2
    xor     a7, a7, s3
    xor     t0, t0, s4
    xor     t1, t1, s5
    xor     t2, t2, s6
    xor     t3, t3, s7
    sw      a4,  0(a2)
    sw      a5,  4(a2)
    sw      a6,  8(a2)
    sw      a7, 12(a2)
    sw      t0, 16(a2)
    sw      t1, 20(a2)
    sw      t2, 24(a2)
    sw      t3, 28(a2)
    addi    a1, a1, 32
    addi    a2, a2, 32
    sw      a1, 60(sp)
    sw      a2, 56(sp)

    // load ctr
    lw      a4, 12(a0)

    // decrease len
    addi    a3, a3, -32
    bge     zero, a3, 2f
    sw      a3, 52(sp)

    // update ctr
    revbytes a4, t4,t5
    addi     a4, a4, 2
    revbytes a4, t4,t5
    sw      a4, 12(a0)

    j       1b

.align 2
2:  lw      s0, 48(sp)
    lw      s1, 44(sp)
    lw      s2, 40(sp)
    lw      s3, 36(sp)
    lw      s4, 32(sp)
    lw      s5, 28(sp)
    lw      s6, 24(sp)
    lw      s7, 20(sp)
    lw      s8, 16(sp)
    lw      s9, 12(sp)
    lw     s10,  8(sp)
    lw     s11,  4(sp)

    addi    sp, sp, 64

    ret
.size AES_128_encrypt_ctr,.-AES_128_encrypt_ctr
